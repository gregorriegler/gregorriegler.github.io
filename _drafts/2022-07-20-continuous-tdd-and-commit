---
layout: post
title: Continuous TDD and Commit
tags: 
- TDD
---

I recently felt the urge to experiment with my TDD workflow to eventually come up with something better.
I was bored doing so many wasteful manual steps in between like running the tests, making a commit, pulling and pushing it.
I needed to find a way to eliminate the waste and to automate all the things.
My inspiration was mainly coming from continuous testing, limbo on the cheap and tcr. 

Eventually I came up with a thing that drastically increased my commit frequency.
Practicing this way I managed to create *63 commits* in *25 minutes*, where I peaked at *6 commits per minute*. 
At a few points literally every keystroke went live, and they were all working, covered by tests.

The thing I came up with is based on the following Ideas:

- No manual saving (Code saves itself automatically)
- No manual test running (Tests run themselves as soon as a file changes)
- No manual commits (The Code is committed automatically when the tests are green) 
- No manual pull (The Code is automatically pulled prior to test runs)
- No manual push (Every commit is automatically pushed)

I needed proper tooling (the language I was trying this with was Java).

As I use IntelliJ, which is a great great IDE that by the way bugs out some times as of recent *cough*, it already saves my files automatically. So that problem's solved.
For the automated test running I had tried lots of tools throughout the years already. 
There was infinitest for example. Also IntelliJ offers a feature to run the tests automatically, but it's really slow.
So I needed something faster. Incremental Compilation would be key.
Gradle has it, and it's quite fast, so there's that.
Another option would be the quarkus continuous test runner, but it's fairly new and I didn't know how to customize it.
So I went with gradle.

Gradle already has the continuous mode running `gradle -t test`.
However, since I needed to run more things with more control I chose to not use it and use watchexec instead.
The basic Idea is to run `watchexec -e java ./gradlew test`.
watchexec watches for file changes and is just as fast as the gradle continuous test mode.
Maybe a little `clear` in advance so the output is always well aligned.
With Gradle I can also make my Testoutput pretty using this test-logger plugin. 
TBD Image of tests
I like it.

Now I need to commit as soon as the tests pass. Starting to combine the scripts I want to use a modern tool to make this easy. I choose just.
That's easy.
``` 
git add . 
git commit -am "wip"
```

Continuous compilation


The way I did it was I used a continuous testing approach.



